// import { useEffect, useState, useRef } from 'react';
// import { useDispatch, useSelector } from 'react-redux';
// import { useNavigate } from 'react-router-dom';
// import { userSelector } from '~/redux/selectors';
// import weightSlice from '~/redux/slices/weightSlice';

// function Home() {
//   const tmp = useSelector(userSelector);
//   const [user, setUser] = useState({});

//   const navigate = useNavigate();
//   const [index, setIndex] = useState(0);
//   const [typedText, setTypedText] = useState('');
//   let fullText = `CCh√†o m·ª´ng ${tmp?.login?.currentUser?.fullName} ƒë·∫øn h·ªá th·ªëng`;
//   let characters = fullText.split('');
//   const intervalRef = useRef(null); // <== L∆∞u interval ƒë·ªÉ reset

//   const dispatch = useDispatch();

//   useEffect(() => {
//     setUser(tmp?.login?.currentUser);
//     fullText = `CCh√†o m·ª´ng ${tmp?.login?.currentUser?.fullName} ƒë·∫øn h·ªá th·ªëng`;
//     characters = fullText.split('');
//   }, [tmp]);

//   useEffect(() => {
//     let current = 0;
//     setTypedText('');
//     const typingInterval = setInterval(() => {
//       if (current < characters.length - 1) {
//         setTypedText((prev) => prev + characters[current]);
//         current++;
//       } else {
//         clearInterval(typingInterval);
//       }
//     }, 100);
//     return () => clearInterval(typingInterval);
//   }, [index]);

//   const data = [{ image: require('~/assets/imgs/bg-1.jpg') }, { image: require('~/assets/imgs/bg-2.jpg') }];

//   const handleScanQR = () => {
//     navigate('/scan');
//   };

//   const startAutoSlide = () => {
//     clearInterval(intervalRef.current);
//     intervalRef.current = setInterval(() => {
//       setIndex((prev) => (prev + 1) % data.length);
//     }, 5000); // 10 gi√¢y
//   };

//   useEffect(() => {
//     startAutoSlide();
//     return () => clearInterval(intervalRef.current);
//   }, []);

//   const handleSlider = (i) => {
//     setIndex(i);
//     startAutoSlide(); // Reset th·ªùi gian ƒë·∫øm l·∫°i t·ª´ ƒë·∫ßu
//   };

//   const handleConnectBluetooth = async () => {
//     try {
//       console.log('Y√™u c·∫ßu thi·∫øt b·ªã...');
//       const device = await navigator.bluetooth.requestDevice({
//         filters: [{ name: 'ESP32_SCALE' }],
//         optionalServices: ['0000ff00-0000-1000-8000-00805f9b34fb'],
//       });

//       console.log('ƒêang k·∫øt n·ªëi GATT...');
//       const server = await device.gatt.connect();

//       console.log('ƒêang l·∫•y service...');
//       const service = await server.getPrimaryService('0000ff00-0000-1000-8000-00805f9b34fb');

//       console.log('ƒêang l·∫•y characteristic...');
//       const characteristic = await service.getCharacteristic('0000ff01-0000-1000-8000-00805f9b34fb');

//       console.log('B·∫Øt ƒë·∫ßu nh·∫≠n d·ªØ li·ªáu...');
//       await characteristic.startNotifications();
//       characteristic.addEventListener('characteristicvaluechanged', (event) => {
//         const value = new TextDecoder().decode(event.target.value);
//         dispatch(weightSlice.actions.setWeight(value));
//       });

//       alert('‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi ESP32_SCALE');
//     } catch (error) {
//       console.error('Bluetooth Error:', error);
//       alert('‚ùå L·ªói Bluetooth: ' + error.message);
//     }
//   };

//   const handleCheckClassification = async () => {

//   };

//   return (
//     <div className="overflow-hidden w-full flex justify-center">
//       <div className="relative w-full h-[300px] md:h-[600px]">
//         {data.map((e, i) => (
//           <div
//             key={i}
//             className={`w-full h-full absolute transition-opacity duration-1000 ease-in-out ${
//               index === i ? 'opacity-100 z-10' : 'opacity-0 z-0'
//             }`}
//           >
//             <img className="w-full h-full object-cover" alt="slide" src={e.image} />
//             <div className="absolute inset-0 bg-black bg-opacity-40"></div>

//             {index === i && (
//               <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white space-y-4">
//                 <h1 className="text-[14px] md:text-[24px] font-bold drop-shadow-md whitespace-nowrap">
//                   {typedText}
//                   <span className="animate-pulse">|</span>
//                 </h1>

//                 <div className="flex flex-col md:flex-row justify-center items-center gap-4">
//                   <button
//                     onClick={handleScanQR}
//                     className="bg-yellow-500 hover:bg-yellow-600 text-white font-semibold px-6 py-3 rounded-full shadow-lg transition"
//                   >
//                     üì∑ Qu√©t m√£ QR
//                   </button>

//                   <button
//                     onClick={handleConnectBluetooth}
//                     className="bg-blue-500 hover:bg-blue-600 text-white font-semibold px-6 py-3 rounded-full shadow-lg transition"
//                   >
//                     K·∫øt n·ªëi Bluetooth
//                   </button>
                  
//                   {
//                     user.role === 'admin' &&
//                     <button
//                       onClick={handleCheckClassification}
//                       className="bg-green-500 hover:bg-green-600 text-white font-semibold px-6 py-3 rounded-full shadow-lg transition"
//                     >
//                       Ki·ªÉm tra ph√¢n lo·∫°i
//                     </button>
//                   }
//                 </div>
//               </div>
//             )}
//           </div>
//         ))}

//         {/* Ch·∫•m ƒëi·ªÅu h∆∞·ªõng */}
//         <div className="absolute z-10 flex bottom-5 gap-4 left-1/2 -translate-x-1/2">
//           {data.map((_, i) => (
//             <div
//               key={i}
//               onClick={() => handleSlider(i)}
//               className={`h-3 w-3 rounded-full cursor-pointer transition ${
//                 index === i ? 'bg-yellow-400 scale-110' : 'bg-gray-400'
//               }`}
//             ></div>
//           ))}
//         </div>
//       </div>
//     </div>
//   );
// }

// export default Home;


import { useEffect, useState, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { userSelector } from '~/redux/selectors';
import weightSlice from '~/redux/slices/weightSlice';
import Modal from 'react-modal';
import axios from 'axios';
import { BASE_URL } from '~/config';
import { format } from 'date-fns';

Modal.setAppElement('#root');

function Home() {
  const tmp = useSelector(userSelector);
  const [user, setUser] = useState({});
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const [index, setIndex] = useState(0);
  const [typedText, setTypedText] = useState('');
  let fullText = `CCh√†o m·ª´ng ${tmp?.login?.currentUser?.fullName} ƒë·∫øn h·ªá th·ªëng`;
  let characters = fullText.split('');
  const intervalRef = useRef(null);

  const [isModalOpen, setModalOpen] = useState(false);
  const [departments, setDepartments] = useState([]);
  const [units, setUnits] = useState([]);
  const [selectedDept, setSelectedDept] = useState({});
  const [selectedUnit, setSelectedUnit] = useState({});

  const [errorMessage, setErrorMessage] = useState('');
  const [isErrorModalOpen, setErrorModalOpen] = useState(false);

  const [isLoadingClassification, setIsLoadingClassification] = useState(false);

  const [trashBins, setTrashBins] = useState([]);
  const [isTrashModalOpen, setTrashModalOpen] = useState(false);

  const [isCheckModalOpen, setCheckModalOpen] = useState(false);

  const [isInstructionModalOpen, setInstructionModalOpen] = useState(false);
  const [instructionConfirmed, setInstructionConfirmed] = useState(true);

  const [isFeedbackModalOpen, setFeedbackModalOpen] = useState(false);
  const [feedbackNote, setFeedbackNote] = useState('');

  const [finalConfirmModalOpen, setFinalConfirmModalOpen] = useState(false);
  
  const showError = (msg) => {
    setErrorMessage(msg);
    setErrorModalOpen(true);
  };

  useEffect(() => {
    setUser(tmp?.login?.currentUser);
    fullText = `CCh√†o m·ª´ng ${tmp?.login?.currentUser?.fullName} ƒë·∫øn h·ªá th·ªëng`;
    characters = fullText.split('');
  }, [tmp]);

  useEffect(() => {
    if (isModalOpen || isErrorModalOpen || isTrashModalOpen || isCheckModalOpen || isInstructionModalOpen) return; // D·ª´ng to√†n b·ªô hi·ªáu ·ª©ng n·∫øu c√≥ modal

    let current = 0;
    setTypedText('');
    const typingInterval = setInterval(() => {
      if (current < characters.length - 1) {
        setTypedText((prev) => prev + characters[current]);
        current++;
      } else {
        clearInterval(typingInterval);
      }
    }, 100);

    return () => clearInterval(typingInterval);
  }, [index, isModalOpen, isErrorModalOpen, isTrashModalOpen, isCheckModalOpen, isInstructionModalOpen]);



  const data = [
    { image: require('~/assets/imgs/bg-1.jpg') },
    { image: require('~/assets/imgs/bg-2.jpg') },
  ];

  const handleScanQR = () => {
    navigate('/scan');
  };

  const startAutoSlide = () => {
    clearInterval(intervalRef.current);
    intervalRef.current = setInterval(() => {
      setIndex((prev) => (prev + 1) % data.length);
    }, 5000);
  };

  useEffect(() => {
    if (isModalOpen || isErrorModalOpen || isTrashModalOpen || isCheckModalOpen || isInstructionModalOpen) {
      clearInterval(intervalRef.current); // D·ª´ng ƒë·ªïi ·∫£nh n·∫øu ƒëang m·ªü modal
    } else {
      startAutoSlide(); // Ch·ªâ ch·∫°y khi kh√¥ng c√≥ modal
    }

    return () => clearInterval(intervalRef.current); // D·ªçn s·∫°ch
  }, [isModalOpen, isErrorModalOpen, isTrashModalOpen, isCheckModalOpen, isInstructionModalOpen]);

  useEffect(() => {
    const fetchUnits = async () => {
      if (!selectedDept?.id) return;

      try {
        const today = new Date().toISOString().split('T')[0];

        const res = await axios.get(`${BASE_URL}/api/units`, {
          params: {
            departmentId: selectedDept.id,
            date: today
          }
        });

        setUnits(res.data); // Ch·ªâ ch·ª©a units ch∆∞a ki·ªÉm tra
      } catch (err) {
        showError('L·ªói khi t·∫£i ƒë∆°n v·ªã: ' + err.message);
      }
    };

    fetchUnits();
  }, [selectedDept]);


  const handleSlider = (i) => {
    setIndex(i);
    startAutoSlide();
  };

  const handleConnectBluetooth = async () => {
    try {
      const device = await navigator.bluetooth.requestDevice({
        filters: [{ name: 'ESP32_SCALE' }],
        optionalServices: ['0000ff00-0000-1000-8000-00805f9b34fb'],
      });

      const server = await device.gatt.connect();
      const service = await server.getPrimaryService('0000ff00-0000-1000-8000-00805f9b34fb');
      const characteristic = await service.getCharacteristic('0000ff01-0000-1000-8000-00805f9b34fb');

      await characteristic.startNotifications();
      characteristic.addEventListener('characteristicvaluechanged', (event) => {
        const value = new TextDecoder().decode(event.target.value);
        dispatch(weightSlice.actions.setWeight(value));
      });

      showError('‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi ESP32_SCALE');
    } catch (error) {
      console.error('Bluetooth Error:', error);
      showError('‚ùå L·ªói Bluetooth: ' + error.message);
    }
  };

  const handleCheckClassification = async () => {
    try {
      setIsLoadingClassification(true);
      
      const today = format(new Date(), 'yyyy-MM-dd'); // format ng√†y cho ƒë√∫ng

      const deptRes = await axios.get(`${BASE_URL}/api/departments`, {
        params: { date: today }
      });

      setDepartments(deptRes.data);
      setModalOpen(true);
    } catch (err) {
      showError('L·ªói khi t·∫£i d·ªØ li·ªáu: ' + err.message);
    } finally {
      setIsLoadingClassification(false);
    }
  };

  const handleContinue = async () => {
    if (!selectedDept?.id || (!selectedUnit?.id && units.length > 0)) {
      showError('‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß th√¥ng tin.');
      return;
    }
    setIsLoadingClassification(true);

    try {
      const res = await axios.get(`${BASE_URL}/trash-bin-in-areas`, {
        params: {
          departmentID: selectedDept?.id,
          unitID: selectedUnit?.id,
        },
      });

      setTrashBins(res.data);
      setModalOpen(false);           // ƒë√≥ng modal ch·ªçn b·ªô ph·∫≠n, ƒë∆°n v·ªã
      setTrashModalOpen(true);       // m·ªü modal lo·∫°i r√°c
    } catch (err) {
      showError('L·ªói khi l·∫•y d·ªØ li·ªáu r√°c: ' + err.message);
    } finally {
      setIsLoadingClassification(false);
    }
  };

  const handleFinalSubmit = async () => {
    const payload = {
      department: selectedDept,
      unit: selectedUnit,
      trashBins,
      feedbackNote,
      user: user.userID,
    }
    
    setIsLoadingClassification(true);

    try {
      const res = await fetch(`${BASE_URL}/submit-classification`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      const data = await res.json();

      if (data.success) {
        setFinalConfirmModalOpen(false);
        showError('L∆∞u th√†nh c√¥ng');
      } else {
        showError('L·ªói: ' + data.message);
      }
    } catch (error) {
      console.error('Error:', error);
      showError('L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    } finally {
      setIsLoadingClassification(false);
    }
  }

  return (
    <div className="overflow-hidden w-full flex justify-center">
      <div className="relative w-full h-[300px] md:h-[600px]">
        {data.map((e, i) => (
          <div
            key={i}
            className={`w-full h-full absolute transition-opacity duration-1000 ease-in-out ${
              index === i ? 'opacity-100 z-10' : 'opacity-0 z-0'
            }`}
          >
            <img className="w-full h-full object-cover" alt="slide" src={e.image} />
            <div className="absolute inset-0 bg-black bg-opacity-40"></div>

            {index === i && (
              <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white space-y-4">
                <h1 className="text-[14px] md:text-[24px] font-bold drop-shadow-md whitespace-nowrap">
                  {typedText}
                  <span className="animate-pulse">|</span>
                </h1>

                <div className="flex flex-col md:flex-row justify-center items-center gap-4">
                  <button
                    onClick={handleScanQR}
                    className="bg-yellow-500 hover:bg-yellow-600 text-white font-semibold px-6 py-3 rounded-full shadow-lg transition"
                  >
                    üì∑ Qu√©t m√£ QR
                  </button>

                  <button
                    onClick={handleConnectBluetooth}
                    className="bg-blue-500 hover:bg-blue-600 text-white font-semibold px-6 py-3 rounded-full shadow-lg transition"
                  >
                    K·∫øt n·ªëi Bluetooth
                  </button>

                  {user.role === 'admin' && (
                    <button
                      onClick={handleCheckClassification}
                      className="bg-green-500 hover:bg-green-600 text-white font-semibold px-6 py-3 rounded-full shadow-lg transition min-w-[180px] flex items-center justify-center gap-2"
                    >
                      {isLoadingClassification && (
                        <svg
                          className="animate-spin h-5 w-5 text-white"
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                          ></path>
                        </svg>
                      )}
                      {!isLoadingClassification && 'Ki·ªÉm tra ph√¢n lo·∫°i'}
                    </button>
                  )}
                </div>
              </div>
            )}
          </div>
        ))}

        <div className="absolute z-10 flex bottom-5 gap-4 left-1/2 -translate-x-1/2">
          {data.map((_, i) => (
            <div
              key={i}
              onClick={() => handleSlider(i)}
              className={`h-3 w-3 rounded-full cursor-pointer transition ${
                index === i ? 'bg-yellow-400 scale-110' : 'bg-gray-400'
              }`}
            ></div>
          ))}
        </div>
      </div>

      {/* Modal ch·ªçn b·ªô ph·∫≠n & ƒë∆°n v·ªã */}
      <Modal
        isOpen={isModalOpen}
        //onRequestClose={() => setModalOpen(false)}
        className="bg-white rounded-xl max-w-md w-full p-6 mx-auto mt-20 shadow-lg outline-none"
        overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-[50]"
      >
        <h2 className="text-xl font-bold mb-4">üîç Ki·ªÉm tra ph√¢n lo·∫°i</h2>

        <div className="mb-4">
          <label className="block mb-1 font-semibold">B·ªô ph·∫≠n:</label>
          <select
            value={selectedDept?.id}
            onChange={(e) => {
              const selectedOption = e.target.options[e.target.selectedIndex];
              const selectedName = selectedOption.dataset.name;


              setSelectedDept({
                id: e.target.value,
                name: selectedName,
              });
              setSelectedUnit({});
            }}
            className="w-full border rounded px-3 py-2"
          >
            <option value="">-- Ch·ªçn b·ªô ph·∫≠n --</option>
            {departments?.map((dept) => (
              <option
                key={dept.departmentID}
                value={dept.departmentID}
                data-name={dept.departmentName}
              >
                {dept?.departmentName?.normalize('NFC') === 'ChuÃ£p khung'.normalize('NFC') ? 'ChuÃ£p Khu√¥n' : dept.departmentName}
              </option>
            ))}
          </select>
        </div>

        <div className="mb-6">
          <label className="block mb-1 font-semibold">ƒê∆°n v·ªã:</label>
          <select
            value={selectedUnit?.id}
            onChange={(e) => {
              const selectedOption = e.target.options[e.target.selectedIndex];
              const selectedName = selectedOption.dataset.name;

              setSelectedUnit({
                id: e.target.value,
                name: selectedName,
              });
            }}
            className="w-full border rounded px-3 py-2"
          >
            <option value="">-- Ch·ªçn ƒë∆°n v·ªã --</option>
            {units?.map((unit) => (
                <option
                  key={unit.unitID}
                  value={unit.unitID}
                  data-name={unit.unitName}
                >
                  {unit.unitName}
                </option>
              ))}
          </select>
        </div>

        <div className="flex justify-end gap-2">
          <button
            onClick={() => {
              setSelectedDept({});
              setSelectedUnit({});
              setModalOpen(false);
            }}
            className="px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded"
          >
            H·ªßy
          </button>
          <button
            onClick={handleContinue}
            className="px-4 py-2 bg-green-500 text-white hover:bg-green-600 rounded"
          >
                      {isLoadingClassification && (
                        <svg
                          className="animate-spin h-5 w-5 text-white"
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                          ></path>
                        </svg>
                      )}
                      {!isLoadingClassification && 'Ti√™ÃÅp tuÃ£c'}
          </button>
        </div>
      </Modal>

      {/* Modal th√¥ng b√°o l·ªói */}
      <Modal
        isOpen={isErrorModalOpen}
        onRequestClose={() => setErrorModalOpen(false)}
        className="bg-white rounded-xl max-w-sm w-full p-6 mx-auto mt-20 shadow-lg outline-none text-center"
        overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-[53]"
      >
        <h3 className="text-lg font-semibold mb-3">Th√¥ng b√°o</h3>
        <p className="mb-4">{errorMessage}</p>
        <button
          onClick={() => setErrorModalOpen(false)}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          ƒê√≥ng
        </button>
      </Modal>

      <Modal
        isOpen={isTrashModalOpen}
        //onRequestClose={() => setTrashModalOpen(false)}
        className="bg-white rounded-xl max-w-lg w-full p-6 mx-auto mt-20 shadow-lg outline-none"
        overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-[52]"
      >
        <h2 className="text-xl font-bold mb-4">üóëÔ∏è S√¥ÃÅ l∆∞∆°Ã£ng thuÃÄng r√°c</h2>

        {trashBins.length === 0 ? (
          <p>Kh√¥ng c√≥ lo·∫°i r√°c n√†o ƒë∆∞·ª£c c·∫•u h√¨nh cho b·ªô ph·∫≠n v√† ƒë∆°n v·ªã n√†y.</p>
        ) : (
          <ul className="space-y-4 max-h-60 overflow-y-auto pr-2">
            {trashBins.map((item, index) => {
              // G√°n m√†u theo t√™n r√°c
              const normalizedTrashName = item.trashName?.normalize('NFC')?.trim();
              const colorMap = {
                'Gi·∫ª lau d√≠nh m·ª±c th∆∞·ªùng': 'bg-yellow-400',
                'Gi·∫ª lau d√≠nh m·ª±c lapa': 'bg-yellow-400',
                'BƒÉng keo d√≠nh h√≥a ch·∫•t': 'bg-white border border-gray-400',
                'M·ª±c in th∆∞·ªùng th·∫£i': 'bg-red-500',
                'M·ª±c in lapa th·∫£i': 'bg-red-500',
                'R√°c sinh ho·∫°t': 'bg-green-500',
                'V·ª•n logo': 'bg-black'
              };

              const colorClass = colorMap[normalizedTrashName] || 'bg-gray-300';

              return (
                <li
                  key={item.trashBinInAreaID}
                  className="border rounded-lg px-4 py-3 shadow-sm bg-gray-50"
                >
                  <div className="flex items-start gap-3">
                    <div className={`w-4 h-4 mt-1 rounded-full ${colorClass}`} />
                    <div className="flex-1 space-y-1">
                      <div className="text-base font-medium text-gray-800">
                        {item.trashName}
                      </div>
                      <div className="text-sm text-gray-600">
                        <strong>S·ªë l∆∞·ª£ng theo quy ƒë·ªãnh:</strong> {item.expectedQuantity}
                      </div>
                      <div>
                        <label htmlFor={`actual-${index}`} className="block text-sm font-semibold mb-1">
                          Th√πng hi·ªán c√≥:
                        </label>
                        <input
                          id={`actual-${index}`}
                          type="number"
                          min="0"
                          className="w-full border border-gray-300 rounded-lg px-3 py-1.5 focus:outline-none focus:ring-2 focus:ring-blue-400"
                          value={item.actualQuantity ?? ''}
                          onChange={(e) => {
                            const newValue = parseInt(e.target.value);
                            const updatedBins = [...trashBins];
                            updatedBins[index] = {
                              ...updatedBins[index],
                              actualQuantity: newValue
                            };
                            setTrashBins(updatedBins);
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </li>
              );
            })}
          </ul>
        )}
        <div className="flex justify-between mt-6">
          <button
            onClick={() => {
              setTrashModalOpen(false);
              setModalOpen(true); // m·ªü l·∫°i modal tr∆∞·ªõc ƒë√≥ (v√≠ d·ª•: ch·ªçn b·ªô ph·∫≠n & ƒë∆°n v·ªã)
            }}
            className="px-4 py-2 bg-gray-400 text-white rounded hover:bg-gray-500"
          >
            Quay l·∫°i
          </button>
          
          <button
            onClick={() => {
              // h√†nh ƒë·ªông hu·ª∑
              setTrashModalOpen(false);
              setSelectedDept({});
              setSelectedUnit({});
              setTrashBins([]);
              setInstructionConfirmed(true);
              setFeedbackNote('');
            }}
            className="flex px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
          >
            Hu·ª∑
          </button>

          <button
            onClick={() => {
              setIsLoadingClassification(true);
              const binsWithDefaultCheck = trashBins.map((item) => ({
                ...item,
                isCorrect: item.isCorrect ?? true, // ch·ªâ g√°n n·∫øu ch∆∞a c√≥
              }));

              setTrashBins(binsWithDefaultCheck);
              setTrashModalOpen(false);
              setCheckModalOpen(true); // m·ªü modal ti·∫øp theo, v√≠ d·ª•: nh·∫≠p s·ªë li·ªáu c√¢n ho·∫∑c x√°c nh·∫≠n
              setIsLoadingClassification(false);
            }}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            
                      {isLoadingClassification && (
                        <svg
                          className="animate-spin h-5 w-5 text-white"
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                          ></path>
                        </svg>
                      )}
                      {!isLoadingClassification && 'Ti√™ÃÅp tuÃ£c'}
          </button>
        </div>
      </Modal>

      <Modal
        isOpen={isCheckModalOpen}
        //onRequestClose={() => setCheckModalOpen(false)}
        className="bg-white rounded-xl max-w-xl w-full p-6 mx-auto mt-20 shadow-lg outline-none"
        overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-[60]"
      >
        <h2 className="text-xl font-bold mb-4">üß™ X√°c nh·∫≠n ph√¢n lo·∫°i r√°c</h2>

        <ul className="space-y-2 max-h-64 overflow-y-auto">
          {trashBins.map((item, index) => {
            const normalizedTrashName = item.trashName?.normalize('NFC')?.trim();
            const colorMap = {
                'Gi·∫ª lau d√≠nh m·ª±c th∆∞·ªùng': 'bg-yellow-400',
                'Gi·∫ª lau d√≠nh m·ª±c lapa': 'bg-yellow-400',
                'BƒÉng keo d√≠nh h√≥a ch·∫•t': 'bg-white border border-gray-400',
                'M·ª±c in th∆∞·ªùng th·∫£i': 'bg-red-500',
                'M·ª±c in lapa th·∫£i': 'bg-red-500',
                'R√°c sinh ho·∫°t': 'bg-green-500',
                'V·ª•n logo': 'bg-black'
            };
            const colorClass = colorMap[normalizedTrashName] || 'bg-gray-300';

            return (
              <li
                key={item.trashBinInAreaID}
                className={`flex items-center justify-between border rounded px-4 py-2 shadow-sm`}
              >
                <div className="flex items-center gap-3">
                  <span className={`w-4 h-4 rounded-full ${colorClass}`}></span>
                  <div className="font-semibold">{item.trashName}</div>
                </div>

                <div className="flex gap-6">
                  <button
                    className={`w-10 h-10 rounded-full flex items-center justify-center ${
                      item.isCorrect === true ? 'bg-green-500 text-white' : 'bg-gray-200'
                    }`}
                    onClick={() => {
                      const updated = [...trashBins];
                      updated[index] = { ...item, isCorrect: true };
                      setTrashBins(updated);
                    }}
                  >
                    ‚úÖ
                  </button>
                  <button
                    className={`w-10 h-10 rounded-full flex items-center justify-center ${
                      item.isCorrect === false ? 'bg-red-500 text-white' : 'bg-gray-200'
                    }`}
                    onClick={() => {
                      const updated = [...trashBins];
                      updated[index] = { ...item, isCorrect: false };
                      setTrashBins(updated);
                    }}
                  >
                    ‚ùå
                  </button>
                </div>
              </li>
            );
          })}
        </ul>

        <div className="flex justify-between mt-6">
          <button
            onClick={() => {
              setCheckModalOpen(false);
              setTrashModalOpen(true); // quay l·∫°i ch·ªânh s·ª≠a
            }}
            className="px-4 py-2 bg-gray-400 text-white rounded hover:bg-gray-500"
          >
            Quay l·∫°i
          </button>
          
          <button
            onClick={() => {
              // h√†nh ƒë·ªông hu·ª∑
              setCheckModalOpen(false);
              setSelectedDept({});
              setSelectedUnit({});
              setTrashBins([]);
              setInstructionConfirmed(true);
              setFeedbackNote('');
            }}
            className="flex px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
          >
            Hu·ª∑
          </button>

          <button
            onClick={() => {
              setIsLoadingClassification(true);
              // Ki·ªÉm tra n·∫øu m·ªçi lo·∫°i r√°c ƒë·ªÅu ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u
              const allChecked = trashBins.every((item) => item.isCorrect !== undefined);
              if (!allChecked) {
                alert('Vui l√≤ng x√°c nh·∫≠n t·∫•t c·∫£ c√°c lo·∫°i r√°c!');
                return;
              }

              setCheckModalOpen(false);
              setInstructionModalOpen(true);
              setIsLoadingClassification(false);
            }}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            
                      {isLoadingClassification && (
                        <svg
                          className="animate-spin h-5 w-5 text-white"
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                          ></path>
                        </svg>
                      )}
                      {!isLoadingClassification && 'Ti√™ÃÅp tuÃ£c'}
          </button>
        </div>
      </Modal>

      <Modal
        isOpen={isInstructionModalOpen}
        //onRequestClose={() => setInstructionModalOpen(false)}
        className="bg-white rounded-xl max-w-lg w-full p-6 mx-auto mt-20 shadow-lg outline-none"
        overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-[52]"
      >
        <h2 className="text-xl font-bold mb-6 text-center">
          üë®‚Äçüè≠ Th·ª£ in ƒë√£ ƒë∆∞·ª£c h∆∞·ªõng d·∫´n ph√¢n lo·∫°i ch∆∞a?
        </h2>

        <div className="flex justify-center space-x-4 mb-6">
          <button
            onClick={() => setInstructionConfirmed(true)}
            className={`flex items-center px-4 py-2 rounded-full border ${
              instructionConfirmed ? 'bg-green-500 text-white' : 'bg-white text-gray-700 border-gray-400'
            } hover:bg-green-600 hover:text-white transition`}
          >
            ‚úÖ ƒê√£ h∆∞·ªõng d·∫´n
          </button>

          <button
            onClick={() => {
              setInstructionConfirmed(false);
            }}
            className={`flex items-center px-4 py-2 rounded-full border ${
              instructionConfirmed === false ? 'bg-red-500 text-white' : 'bg-white text-gray-700 border-gray-400'
            } hover:bg-red-600 hover:text-white transition`}
          >
            ‚ùå Ch∆∞a h∆∞·ªõng d·∫´n
          </button>
        </div>

        <div className="flex justify-between mt-6">
          <button
            onClick={() => {
              setInstructionModalOpen(false);
              setCheckModalOpen(true); // modal tr∆∞·ªõc ƒë√≥
            }}
            className="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400"
          >
            Quay l·∫°i
          </button>
          
          <button
            onClick={() => {
              // h√†nh ƒë·ªông hu·ª∑
              setInstructionModalOpen(false);
              setSelectedDept({});
              setSelectedUnit({});
              setTrashBins([]);
              setInstructionConfirmed(true);
              setFeedbackNote('');
            }}
            className="flex px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
          >
            Hu·ª∑
          </button>

          <button
            onClick={() => {
              setIsLoadingClassification(true);
              if (instructionConfirmed) {
                setInstructionModalOpen(false);
                setFeedbackModalOpen(true);
              } else {
                showError('‚ö†Ô∏è Vui l√≤ng h∆∞·ªõng d·∫´n th·ª£ in ph√¢n lo·∫°i tr∆∞·ªõc khi ti·∫øp t·ª•c.');
              }
              setIsLoadingClassification(false);
            }}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            
                      {isLoadingClassification && (
                        <svg
                          className="animate-spin h-5 w-5 text-white"
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                          ></path>
                        </svg>
                      )}
                      {!isLoadingClassification && 'Ti√™ÃÅp tuÃ£c'}
          </button>
        </div>
      </Modal>

      <Modal
        isOpen={isFeedbackModalOpen}
        //onRequestClose={() => setFeedbackModalOpen(false)}
        className="bg-white rounded-xl max-w-lg w-full p-6 mx-auto mt-20 shadow-lg outline-none"
        overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-[52]"
      >
        <h2 className="text-xl font-bold mb-4 text-center">üìù Ghi ch√∫ ph·∫£n h·ªìi</h2>

        <textarea
          className="w-full h-32 p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 resize-none"
          placeholder="Nh·∫≠p ghi ch√∫ n·∫øu c√≥..."
          value={feedbackNote}
          onChange={(e) => setFeedbackNote(e.target.value)}
        />

        <div className="flex justify-between mt-6">
          <button
            onClick={() => {
              setFeedbackModalOpen(false);
              setInstructionModalOpen(true); // modal tr∆∞·ªõc ƒë√≥
            }}
            className="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400"
          >
            Quay l·∫°i
          </button>
          
          <button
            onClick={() => {
              // h√†nh ƒë·ªông hu·ª∑
              setFeedbackModalOpen(false);
              setSelectedDept({});
              setSelectedUnit({});
              setTrashBins([]);
              setInstructionConfirmed(true);
              setFeedbackNote('');
            }}
            className="flex px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
          >
            Hu·ª∑
          </button>

          <button
            onClick={() => {
              setIsLoadingClassification(true);
              setFeedbackModalOpen(false);
              setFinalConfirmModalOpen(true);
              setIsLoadingClassification(false);
            }}
            className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
          >
            
                      {isLoadingClassification && (
                        <svg
                          className="animate-spin h-5 w-5 text-white"
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                          ></path>
                        </svg>
                      )}
                      {!isLoadingClassification && 'HoaÃÄn t√¢ÃÅt'}
          </button>
        </div>
      </Modal>

      <Modal
        isOpen={finalConfirmModalOpen}
        //onRequestClose={() => setFinalConfirmModalOpen(false)}
        className="bg-white rounded-xl max-w-xl w-full p-6 mx-auto mt-20 shadow-lg outline-none"
        overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-[70]"
      >
        <h2 className="text-xl font-bold mb-6 text-center">üîí X√°c nh·∫≠n th√¥ng tin cu·ªëi c√πng</h2>

        <div className="space-y-4 max-h-80 overflow-y-auto px-2">
          <div className='flex'>
            <h3 className="font-semibold text-gray-700 mb-1">üìå B·ªô ph·∫≠n:</h3>
            <p className="text-gray-900 ml-[8px]">{selectedDept?.name?.normalize('NFC') === 'ChuÃ£p khung'.normalize('NFC') ? 'ChuÃ£p Khu√¥n' : selectedDept?.name}</p>
          </div>

          <div className='flex'>
            <h3 className="font-semibold text-gray-700 mb-1">üè∑Ô∏è ƒê∆°n v·ªã:</h3>
            <p className="text-gray-900 ml-[8px]">{selectedUnit?.name}</p>
          </div>

          <div>
            <h3 className="font-semibold text-gray-700 mb-1">‚ôªÔ∏è K·∫øt qu·∫£ ph√¢n lo·∫°i:</h3>
            <ul className="space-y-2">
              {trashBins.map((item) => {
                const isCorrect = item.isCorrect;
                const color = isCorrect ? 'text-green-600' : 'text-red-500';
                return (
                  <li key={item.trashBinInAreaID} className={`border rounded px-4 py-2 ${color}`}>
                    <div className="flex justify-between items-center">
                      <span className="font-medium">{item.trashName}</span>
                      <span>{isCorrect ? '‚úÖ ƒê√∫ng' : '‚ùå Sai'}</span>
                    </div>
                    <div className="text-sm text-gray-600">
                      Theo quy ƒë·ªãnh: <strong>{item.expectedQuantity}</strong>, hi·ªán c√≥: <strong>{item.actualQuantity}</strong>
                    </div>
                  </li>
                );
              })}
            </ul>
          </div>

          <div>
            <h3 className="font-semibold text-gray-700 mb-1">üìù Ghi ch√∫:</h3>
            <p className="text-gray-800 whitespace-pre-wrap">
              {feedbackNote.trim() !== '' ? feedbackNote : '(Kh√¥ng c√≥ ghi ch√∫)'}
            </p>
          </div>
        </div>

        <div className="flex justify-between mt-6">
          <button
            onClick={() => {
              setFinalConfirmModalOpen(false);
              setFeedbackModalOpen(true);
            }}
            className="px-4 py-2 bg-gray-400 text-white rounded hover:bg-gray-500"
          >
            Quay l·∫°i
          </button>

          <button
            onClick={() => {
              // G·ªçi h√†m submit / l∆∞u d·ªØ li·ªáu ch√≠nh th·ª©c
              handleFinalSubmit();
            }}
            className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
          >
            
                      {isLoadingClassification && (
                        <svg
                          className="animate-spin h-5 w-5 text-white"
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                          ></path>
                        </svg>
                      )}
                      {!isLoadingClassification && 'XaÃÅc nh√¢Ã£n'}
          </button>
        </div>
      </Modal>

    </div>
  );
}

export default Home;
